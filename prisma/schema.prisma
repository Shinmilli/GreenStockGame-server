// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Team {
  id          Int      @id @default(autoincrement())
  code        String   @unique
  name        String?
  balance     Decimal  @default(10000)
  esgScore    Int      @default(0) @map("esg_score")
  quizScore   Int      @default(0) @map("quiz_score")
  createdAt   DateTime @default(now()) @map("created_at")

  quizSubmissions QuizSubmission[]
  roundResults    RoundResult[]
  
  holdings     Holding[]
  transactions Transaction[]
  
  @@map("teams")
}

model QuizSubmission {
  id             Int      @id @default(autoincrement())
  teamId         Int
  questionId     Int
  selectedAnswer Int
  isCorrect      Boolean
  submittedAt    DateTime @default(now())
  roundNumber    Int

  team           Team         @relation(fields: [teamId], references: [id])
  question       QuizQuestion @relation(fields: [questionId], references: [id])

  @@unique([teamId, questionId])
  @@map("quiz_submissions")
}
model RoundResult {
  id           Int     @id @default(autoincrement())
  roundNumber  Int
  teamId       Int
  quizScore    Int     @default(0)
  tradingProfit Decimal @default(0) @db.Decimal(15, 2)
  esgBonus     Int     @default(0)
  totalScore   Int     @default(0)
  createdAt    DateTime @default(now())

  team         Team    @relation(fields: [teamId], references: [id])

  @@unique([roundNumber, teamId])
  @@map("round_results")
}

model GameSession {
  id            Int       @id @default(autoincrement())
  startTime     DateTime  @default(now())
  endTime       DateTime?
  currentRound  Int       @default(1)
  currentPhase  String    @default("news") // news, quiz, trading, results, finished
  isActive      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("game_sessions")
}

model Stock {
  id           Int      @id @default(autoincrement())
  symbol       String   @unique
  companyName  String   @map("company_name")
  currentPrice Decimal  @map("current_price")
  esgCategory  String   @map("esg_category")
  description  String?
  createdAt    DateTime @default(now()) @map("created_at")
  
  holdings     Holding[]
  transactions Transaction[]
  
  @@map("stocks")
}

model Holding {
  id          Int     @id @default(autoincrement())
  teamId      Int     @map("team_id")
  stockId     Int     @map("stock_id")
  quantity    Int
  avgBuyPrice Decimal @map("avg_buy_price")
  createdAt   DateTime @default(now()) @map("created_at")
  
  team  Team  @relation(fields: [teamId], references: [id])
  stock Stock @relation(fields: [stockId], references: [id])
  
  @@map("holdings")
}

model Transaction {
  id        Int      @id @default(autoincrement())
  teamId    Int      @map("team_id")
  stockId   Int      @map("stock_id")
  type      String   // 'BUY' or 'SELL'
  quantity  Int
  price     Decimal
  fee       Decimal  @default(0)
  createdAt DateTime @default(now()) @map("created_at")
  
  team  Team  @relation(fields: [teamId], references: [id])
  stock Stock @relation(fields: [stockId], references: [id])
  
  @@map("transactions")
}

model QuizQuestion {
  id            Int      @id @default(autoincrement())
  question      String
  options       Json
  correctAnswer Int      @map("correct_answer")
  roundNumber   Int      @map("round_number")
  createdAt     DateTime @default(now()) @map("created_at")
  
  submissions   QuizSubmission[]

  @@map("quiz_questions")
}

model NewsEvent {
  id             Int      @id @default(autoincrement())
  title          String
  content        String?
  affectedStocks Json     @map("affected_stocks")
  roundNumber    Int      @map("round_number")
  isActive       Boolean  @default(true) @map("is_active")
  createdAt      DateTime @default(now()) @map("created_at")
  
  @@map("news_events")
}